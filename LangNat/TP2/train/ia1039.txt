pour les articles homonymes , voir marquardt ( homonymie ) . l ’ algorithme de levenberg-marquardt , ou algorithme lm , permet d&apos; obtenir une solution numérique au problème de minimisation d&apos; une fonction , souvent non linéaire et dépendant de plusieurs variables . l&apos; algorithme interpole l&apos; algorithme de gauss-newton et l&apos; algorithme du gradient . plus stable que celui de gauss-newton , il trouve une solution même s&apos; il est démarré très loin d&apos; un minimum . cependant , pour certaines fonctions très régulières , il peut converger légèrement moins vite . l&apos; algorithme fut développé par kenneth levenberg , puis publié par donald marquardt . c&apos; est un problème qui se présente souvent en régression linéaire et non linéaire . article détaillé : méthode des moindres carrés. soit minimale . la procédure de l&apos; algorithme est itérative . on part d&apos; un paramètre initial , que l&apos; on suppose « assez proche » d&apos; un minimum , et qui constituera le vecteur p de départ . dans beaucoup de cas , un paramètre de départ « standard » , tel que pt = ( 1,1 , … , 1 ) fonctionnera sans problème . dans certains cas , il n&apos; y a convergence que si le vecteur de départ n&apos; est pas trop éloigné de la solution. où on a noté j la jacobienne de f en p. d&apos; où l&apos; on tire aisément q en inversant jtj . dans l&apos; inversion matricielle , tout va dépendre du rapport entre la valeur propre la plus grande en norme , et la valeur propre la plus petite ; ce rapport , appelé conditionnement de matrice , va concrètement refléter la robustesse de l&apos; algorithme face au bruit . le facteur d&apos; amortissement positif λ est ajusté à chaque nouvelle itération . si la diminution de s est rapide , on peut utiliser une valeur plus faible - ce qui rapproche l&apos; algorithme de celui de gauss-newton . si en revanche une itération est peu efficace , on peut augmenter λ , ce qui rapproche cette fois l&apos; algorithme de celui du gradient . un tel facteur d&apos; amortissement est utilisé par exemple dans la régularisation de tikhonov , utilisée pour résoudre certains problèmes linéaires . si on a effectué plus d&apos; un certain nombre d&apos; itérations , ou bien que l&apos; on s&apos; est approché suffisamment d&apos; un minimum , la procédure se termine et renvoie le paramètre p comme estimation de la solution . de nombreux arguments , plus ou moins heuristiques ont été proposés afin de déterminer le meilleur facteur d&apos; amortissement λ . des démonstrations théoriques montrent que certains choix garantissent une convergence locale - mais peuvent afficher une convergence faible près de l&apos; optimum . la valeur absolue de tout choix dépend de l&apos; échelle du problème . marquardt recommandait de commencer à partir de λ0 et avec un facteur ν &gt; 1 . on pose alors au départ λ = λ0 et calculons la somme des carrés des déviations s ( p ) après une itération , en utilisant le facteur d&apos; amortissement λ = λ0 , puis en utilisant λ / ν . si les deux derniers renvoient un point moins bon que le point de départ , on augmente λ en le multipliant par ν , jusqu&apos; à atteindre un point meilleur avec un nouveau facteur λνk pour un certain k. si l&apos; utilisation du facteur λ / ν donne une somme plus faible , alors il est pris comme nouvelle valeur de λ et l&apos; algorithme continue . si l&apos; utilisation de λ / ν donne une somme plus importante , mais que l&apos; utilisation de λ donne une somme plus faible , alors λ est conservé . ( en ) cet article est partiellement ou en totalité issu de l ’ article de wikipédia en anglais intitulé « levenberg-marquardt algorithm » ( voir la liste des auteurs ) . ( en ) lmdif , implémentation classique en fortran , domaine public . ( en ) lmfit , bibliothèque pour une utilisation dans des programmes en c ou c + + , licence : domaine public . ( en ) la gnu scientific library ( gsl ) fait partie du projet gnu , il s&apos; agit d&apos; une bibliothèque écrite en c , licence : gpl . ( en ) levmar , implémentation gpl en c + + , perl et python . ( en ) idiom.com et users.utu.fi : mises en œuvre java . ( en ) gnuplot en possède une implémentation . ( en ) alglib , implémentations en c # , c + + , delphi , visual basic . fitoo , implémentation sous forme de modèle et de macros pour openoffice.org. imsl , implémentation pour fortran , c / c + + , java et c # . ( en ) the mathworks : lmfsolve.m / lmfnlsq.m , implémentation pour matlab . artelys knitro , solveur nonlinéaire avec une implémentation de l&apos; algorithme lm pour c / c + + , java , c # , python , matlab et r.
