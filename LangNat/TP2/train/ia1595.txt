aidez à ajouter des liens en plaçant le code &#91; &#91; système de classeurs &#93; &#93; dans les articles relatifs au sujet . vous pouvez partager vos connaissances en l ’ améliorant ( comment ? ) selon les recommandations des projets correspondants . un système de classeurs ( aussi appelé classifiers ) est composé d&apos; une base de règles , appelée classeur , associés à un poids . chaque règle est composée d&apos; une partie condition et d&apos; une partie action . le classeur commence par être initialisé ( aléatoirement ou non ) . pour exécuter un système de classeur , on sélectionne l&apos; ensemble des règles applicables pour la situation en cours et l&apos; on effectue un tirage aléatoire proportionnel aux poids de chaque règle . si l&apos; action est mauvaise , on diminue le poids de la règle ayant été sélectionnée . si au contraire elle a été bénéfique , on augmente ce poids . l&apos; apprentissage consiste à exécuter un algorithme génétique qui va produire d&apos; autres classeurs avec des règles différentes . type michigan : l&apos; algorithme génétique est exécuté sur une population de règles . type pittsburgh : l&apos; algorithme génétique est exécuté avec des individus représentant un classeur complet et non plus seulement chaque règles . smith , a learning system based on genetic algorithms , phd . thesis , computer science department , university of pittsburgh , 1980 . cet exemple présente un système de classeurs de type michigan très simple . considérons un environnement constitué de cases pouvant être remplies ou vides . un robot évoluant dans cet environnement peut se déplacer sur une des cases adjacentes si celle-ci est vide . en numérotant les cases entourant le robot de 1 à 8 ( par exemple en partant de la case en haut à gauche et en tournant dans le sens inverse des aiguilles d&apos; une montre ) , on peut écrire une condition de huit éléments binaires ( 0 ou 1 ) , où le ième élément représente si la ième case adjacente est pleine ou vide . par exemple , la condition 01000000 est vraie si le robot n&apos; a qu&apos; une seule case remplie autour de lui ( la case au &quot; dessus &quot; , voir figure ) . admettons maintenant un caractère supplémentaire « # » étant une sorte de joker dans la condition . par exemple : # 1 # 0 # 0 # 0 est vrai si la case du dessus est remplie , si les cases de droite , gauche et du dessous sont vides , et quels que soient les états des cases en diagonales . numérotons de 1 à 8 les actions possibles , le chiffre correspondant à la case sur laquelle le robot doit se déplacer . admettons que la règle 2 soit sélectionnée . dans ce cas , le robot effectuera l&apos; action d&apos; aller sur la case 2 qui est remplie . cette action n&apos; est pas permise par l&apos; environnement . la règle 2 sera donc &quot; punie &quot; , c&apos; est-à-dire que l&apos; on va diminuer son poids . pour améliorer le comportement du robot , le principe va ensuite être de modifier les règles du classeur ( ou même produire d&apos; autres classeur ) , par un algorithme génétique . en les croisant , nous produisons 2 autres règles qui viendront remplacer leurs parents ou d&apos; autres règles moins performantes . ces actions sont ensuite exécutées jusqu&apos; à ce que le comportement du système ( ici le robot ) convienne .
