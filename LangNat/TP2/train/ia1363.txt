les machines lisp sont des ordinateurs conçus pour interpréter lisp efficacement et nativement . d&apos; une certaine manière , elles furent les premières stations de travail mono-utilisateur commercialisées . malgré le faible nombre de machines lisp ( environ 7 000 unités en 1988newquist , harvey . template : lang , sams publishing , 1994 . template : isbn ) , beaucoup de technologies communes de nos jours ( telles qu&apos; un ramasse-miettes efficace , l&apos; impression laser , les interfaces fenêtrées , la souris , les images bitmap haute résolution , les moteurs de rendu et plusieurs innovations dans le domaine des réseaux ) ont été développées en premier lieu sur des machines lisp comme celles utilisées par le centre de recherche xerox parc . les programmes d&apos; intelligence artificielle ( ia ) des années 1960 et 1970 nécessitaient des ordinateurs considérés à l&apos; époque comme d&apos; une très grande puissance ( c&apos; est-à-dire possédant un processeur rapide et beaucoup de mémoire ) . ces besoins de puissance étaient accentués par le fait que les recherches américaines en ia étaient implémentées quasiment exclusivement avec le langage de programmation lisp , alors que tout le matériel du commerce était conçu et optimisé pour les langages de type assembleur ou fortran . au début , le coût de telles machines était tel qu&apos; elles devaient être partagées par plusieurs utilisateurs . mais lorsque la technologie des circuits intégrés commença à réduire la taille et les coûts des ordinateurs ( fin des années 1960 ) , et lorsque les besoins de mémoire des programmes d&apos; ia commencèrent à excéder l&apos; espace d&apos; adressage des ordinateurs les plus courants des centres de recherche ( les dec pdp-10 ) , les chercheurs considérèrent une nouvelle approche : un ordinateur conçu spécialement pour écrire et exécuter des programmes d&apos; ia imposants , et adapté à la sémantique du langage de programmation lisp . afin de garder un système d&apos; exploitation ( relativement ) simple , ces machines ne devaient pas être partagées , mais dédiées à un unique utilisateur . en 1973 , richard greenblatt et thomas knight , programmeurs au laboratoire d&apos; intelligence artificielle du massachusetts institute of technology ( mit ) ont initié le mit lisp machine project en construisant pour la première fois un ordinateur capable d&apos; exécuter au niveau matériel , plutôt qu&apos; au niveau logiciel , certaines opérations basiques de lisp , dans une architecture 24 bits . la machine disposait aussi d&apos; un ramasse-miettes incrémental ( dit « arena » ) . par ailleurs , comme les variables lisp sont typées à l&apos; exécution et non à la compilation , une simple addition de deux variables pouvait prendre cinq fois plus de temps sur une machine conventionnelle , à cause des instructions de test et de branchement . les machines lisp effectuent ces tests parallèlement au calcul de l&apos; addition car auparavant si les tests échouaient , le résultat de l&apos; addition était abandonné et recalculé , ce qui pouvait multiplier le temps de calcul dans de nombreux cas . cette approche de vérification simultanée est aussi utilisée pour tester les dépassements de tableaux et d&apos; autres problèmes de gestion de la mémoire . la vérification des types a été par la suite encore améliorée lorsque le mot conventionnel de 32 bits a été étendu à 36 bits pour la i-machinetemplate : en un modèle de machine lisp distribué dans les séries symbolics xl-400 , ux-400 et macivory i ( source symbolics lisp machine museum ) . , puis à 40 bits et plus ( généralement , les bits supplémentaires ne sont pas comptés car ils sont utilisés comme codes correcteurs ) . le premier groupe de bits en plus contient des données sur le type , et les suivants sont utilisés pour implémenter la programmation cdr ( qui consiste à compresser les éléments des listes chaînées ) , aidant de façon non négligeable le ramasse-miettes . une dernière amélioration fut l&apos; ajout de deux instructions machine spécifiques aux fonctions lisp , réduisant le coût d&apos; un appel de fonction à seulement 20 cycles d&apos; horloge ( pour certaines implémentations de symbolics ) . la première machine fut appelée la machine cons ( en référence à l&apos; opérateur de construction de liste cons en lisp . on l&apos; appelle aussi quelquefois la « machine knight » , peut-être parce que c&apos; était le sujet de thèse de knight ) . elle a été enrichie de façon notable dans une seconde version appelée cadr ( un jeu de mot , cadr est l&apos; instruction permettant d&apos; accéder au deuxième élément d&apos; une liste en lisp , elle se prononce « kay &apos; -deur » ou « kah &apos; -deur » ) essentiellement basée sur la même architecture . environ vingt-cinq prototypes de ces machines ont été vendues ( au mit et hors mit ) pour environ 50 000 $ ; elles devinrent rapidement les machines préférées des hackers , la plupart des principaux outils logiciels ont rapidement été portés sur ces machines ( par exemple , emacs a été porté en 1975 ) . elles ont reçu un tel succès lors de la conférence sur l&apos; intelligence artificielle tenue au mit en 1978 que darpa accepta de financer leur développement . en 1979 , russel noftsker , convaincu que les machines lisp sont vouées à un succès commercial grâce à la puissance du langage lisp et à son efficacité une fois accéléré matériellement , fit une proposition à greenblatt : commercialiser cette technologie . allant à l&apos; encontre de la philosophie des hackers du laboratoire d&apos; ia , greenblatt accepta , pensant pouvoir recréer l&apos; ambiance informelle et productive de son laboratoire dans le monde du business , un peu à la manière d&apos; apple . mais cette manière de penser était complètement différente de celle de noftsker . malgré leur longues négociations , aucun n&apos; accepta de compromis . comme l&apos; entreprise ne pouvait être un succès qu&apos; avec le soutien complet de tous les hackers du laboratoire , noftsker et greenblatt estimèrent que le choix du destin de cette entreprise revenait à ces personnes , et les laissèrent donc décider . les discussions qui s&apos; ensuivirent divisèrent le laboratoire en deux camps . en février 1979 , un consensus se dégagea : les hackers étaient du côté de noftsker , estimant qu&apos; une entreprise fondée sur les principes du business &#91; évasif &#93; avait plus de chances de survivre et de vendre des machines lisp que la start-up autogérée proposée par greenblatt . greenblatt avait perdu la bataille . greenblatt était contrarié et inactif tandis que l&apos; entreprise de noftsker ( appelée symbolics ) se formait petit à petit et payait les hackers , mais n&apos; avait aucun local ou équipement à leur proposer au mit ; il négocia donc avec patrick winston ( directeur du labo d&apos; ia ) l&apos; autorisation de laisser le personnel de symbolics travailler hors du mit en échange de la libre utilisation en interne des programmes développés par symbolics . c&apos; est alors qu&apos; un consultant de cdc , qui était à la recherche d&apos; une machine lisp pour travailler sur un langage naturel de programmation , vint à la rencontre de greenblat environ huit mois après la négociation désastreuse avec noftsker sur la commercialisation des machines lisp . greenblatt qui avait décidé de lancer sa propre entreprise concurrente n&apos; avait rien fait . le consultant , alexander jacobson , fut convaincu que la seule façon pour greenblatt de réellement lancer sa compagnie et de construire les machines qu&apos; attendait désespérément jacobson était qu&apos; il le pousse et l&apos; aide à prendre son départ . jacobson mis en place un business plan , une direction , et un partenaire pour greenblatt , nommé f. stephen wyle . la nouvelle entreprise fut créée sous le nom de lisp machine , inc . ( lmi ) , et financée avec des actions de cdc , par l&apos; intermédiaire de jacobson . à peu près au même moment , symbolics , qui avait été gênée par la promesse de noftsker de laisser greenblatt diriger pendant la première année et par plusieurs retards importants du financement devint opérationnelle . symbolics avait quand même le gros avantage d&apos; avoir pris la part du lion : 14 des hackers du laboratoire d&apos; ia avaient été recrutés contre seulement 3 ou 4 par lmi . seules deux personnalités du ai lab du mit étaient restés à l&apos; écart de ces entreprises : richard stallman et marvin minsky . après une série de disputes internes , symbolics sortit de l&apos; ombre en 1980 et 1981 , vendant la cadr sous le nom de lm-2 , tandis que lisp machines , inc. la vendait sous le nom de lmi lisp machine . symbolics n&apos; avait pas l&apos; intention de produire beaucoup de lm-2 , car une seconde générationtemplate : en la machine lisp . l-machine avec les séries symbolics 3600 , puis plus tard avec les séries 3640 et 3670 ( source symbolics lisp machine museum ) . devait arriver sur le marché sous peu , mais était constamment retardée , si bien que symbolics finit par produire environ 100 lm-2 , chacune vendue au prix de 70 000 usd . les deux entreprises développèrent des machines de deuxième génération basées sur la cadr : la l-machine et le lmi lambda ( que lmi parvint à vendre à environ 200 exemplaires ) . la g-machinetemplate : en la g-machine était un nouveau modèle de machines lisp de seconde génération , mais la l-machine fournissait déjà un adressage 28 bit depuis 1982 ( source symbolics lisp machine museum ) . , mise en production une année en retard , étendait la cadr en passant le mot standard à 28 bits , en agrandissant l&apos; espace d&apos; adressage , et en ajoutant du matériel destiné à accélérer certaines fonctions courantes implémentées en microcode dans la cadr . la lmi lambda , sortie un an avant la g-machine ( en 1983 ) , était compatible avec la cadr ( elle pouvait exécuter du microcode cadr ) , mais différait matériellement . texas instruments ( ti ) rejoignit la course en achetant le brevet du lmi lambda et produisit sa propre version , le ti explorer . symbolics continua à développer sa g-machinetemplate : en &#91; http : / / www.andromeda.com / people / ddyer / lisp / la dernière machine lisp symbolics de la série 3600. et son système d&apos; exploitation ( genera ) , et conçut the ivorytemplate : en &#91; http : / / www.andromeda.com / people / ddyer / lisp / nom de code macivory . , une implémentation vlsi de l&apos; architecture symbolics . à partir de 1987 , plusieurs machines basées sur le processeur ivory ont été développées : des cartes mères pour des sun et des mac , des stations de travail et même des systèmes embarqués . texas instruments miniaturisa l&apos; explorer pour donner le microexplorer . lmi abandonna l&apos; architecture cadr et développa sa propre technologie , mais l&apos; entreprise fit faillite avant que la machine eût pu être mise sur le marché . ces machines possédaient le matériel pour exécuter diverses instructions primitives du langage lisp ( vérification des types , programmation cdr ) , ainsi que pour effectuer de la récupération de mémoire incrémentale . elles pouvaient exécuter des programmes lisp volumineux de manière très efficace . les machines symbolics qui rivalisaient avec beaucoup de pc commerciaux , n&apos; ont jamais été adaptées aux tâches conventionnelles de l&apos; informatique . cependant , elles ont néanmoins été vendues sur d&apos; autres marchés que l&apos; ia , tels que le graphisme , la modélisation et l&apos; animation . les machines lisp dérivées de celles du mit interprétaient un dialecte lisp appelé zetalisp , hérité de maclisp , originaire lui aussi du mit . les systèmes d&apos; exploitation étaient écrits en lisp à partir de rien , souvent en utilisant des extensions orientées objet . plus tard , ces machines supportèrent aussi des variantes de common lisp ( telles que flavors , new flavors , et clos ) . bbn développa aussi sa propre machine lisp , appelée jericho , qui utilisait une version d&apos; interlisp , qui n&apos; a jamais été commercialisée . frustrés , l&apos; ensemble de l&apos; équipe d&apos; ia démissionna , et s&apos; engagea õ auprès de xerox principalement . le xerox parc développa donc à son tour ses machines pour interlisp ( et common lisp par la suite ) ainsi que pour d&apos; autres langages tels que smalltalk , mais ils ne parvinrent pas à pénétrer le marché et se retrouvèrent loin derrière lmi et symbolics . parmi ces machines , il y avait la xerox 1100 ( alias dolphin , 1979 ) ; xerox 1132 ( alias dorado ) ; xerox 1108 ( alias dandelion , 1981 ) ; xerox 1109 ( alias dandetiger ) ; et xerox 6085 ( alias daybreak ) . même si les machines de xerox furent un échec commercial , elle influencèrent la création du macintosh d&apos; apple . le système d&apos; exploitation des machines lisp xerox a aussi été porté en une machine virtuelle disponible pour plusieurs plates-formes et appelée medley . ces mêmes machines étaient aussi renommées pour leur environnement de développement évolué , leur interface graphique pionnière , et pour leurs applications innovantes telles que notecards ( l&apos; une des premières applications hypertexte ) . une entreprise britannique , racal-norsk , tenta d&apos; utiliser son supermini norsk data comme machine lisp en microprogrammant un interpréteur du langage zetalisp de symbolics . il y eut aussi plusieurs tentatives des japonais de rentrer sur le marché des machines lisp , parmi lesquelles le coprocesseur facom-alpha de fujitsu ( sorti en fait dès 1978 ) , et plusieurs efforts de recherche universitaires ayant conduit à des prototypes faisant partie du projet fifth generation computer ( en ) catégorie : article contenant un appel à traduction en anglais . une machine lisp a également été conçue en france entre 1977 et 1982 à l&apos; université paul-sabatier de toulouse par une équipe dirigée par jean-paul sansonnet puis industrialisée et construite entre 1982 et 1986 par les laboratoires de marcoussis ( aspects logiciels ) et le cnet de lannion ( aspects matériels ) . il s&apos; agissait de la machine maia , à base d&apos; un processeur 40 bits ( 8 bits pour le type , 32 bits pour la donnée ) et d&apos; un compilateur common lisp complètement redéveloppé à marcoussis . lorsqu&apos; arriva l&apos; hiver de l&apos; intelligence artificielle ( en ) catégorie : article contenant un appel à traduction en anglais ( période au cours de laquelle l&apos; intérêt pour l&apos; intelligence artificielle retomba ) et la révolution des pc ( qui précipita les constructeurs de stations de travail et de superminis dans la faillite ) , les ordinateurs de bureau devinrent capables d&apos; exécuter des programmes lisp à moindre coût et plus vite que les machines lisp , sans utiliser de matériel spécifique . ne pouvant plus appliquer de marges importantes sur leur matériel , la plupart des constructeurs de machines lisp cessèrent leurs activités au début des années 1990 ou devinrent des éditeurs de logiciels . avec xerox , symbolics est le seul constructeur de machines lisp à avoir survécu jusqu&apos; à aujourd&apos; hui , en vendant le système d&apos; exploitation lisp open genera et le logiciel de calcul formel macsyma . à la fin des années 1990 , sun microsystems et d&apos; autres entreprises projetèrent de construire des machines java , de concept similaire aux machines lisp . cadr , thomas knight , david a. moon , jack holloway , guy l. steele . ai lab memos , aim-528 , 1979 . lisp machine manual , 6th ed . richard stallman , daniel weinreb , david moon . 1984 .
