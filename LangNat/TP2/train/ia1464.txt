en logique mathématique , on appelle problème de la décision le fait de déterminer de façon mécanique , par un algorithme , si un énoncé est un théorème de la logique égalitaire du premier ordre , c ’ est-à-dire s&apos; il se dérive dans un système de déduction ( voir système à la hilbert , calcul des séquents , déduction naturelle ) , sans autres axiomes que ceux de l&apos; égalité . de façon équivalente par le théorème de complétude , il s&apos; agit de savoir si un énoncé est universellement valide , c ’ est-à-dire vrai dans tous les modèles ( de l&apos; égalité ) . on parle aussi du problème de la décision dans une théorie axiomatique donnée , par exemple dans l&apos; arithmétique de peano . il s&apos; agit alors de déterminer si un énoncé est un théorème de la théorie en question . dans un langage donné , une solution positive au problème de la décision fournit une solution positive aux problèmes de la décision pour toutes les théories finiment axiomatisables de ce langage . en effet , un énoncé c se déduit d&apos; un système fini d&apos; axiomes si et seulement si on peut dériver en logique pure que la conjonction de ces axiomes entraîne c. le problème fut posé par david hilbert et wilhelm ackermann en 1928 . on utilise d&apos; ailleurs parfois le terme allemand entscheidungsproblem pour désigner le problème de la décision , c&apos; est le cas très souvent en anglais , pour éviter les confusions . la question remonte à gottfried leibniz qui , au xviie siècle , imaginait la construction d&apos; une machine qui pouvait manipuler des symboles afin de déterminer les valeurs des énoncés mathématiques . il comprit que le premier pas serait d&apos; avoir un langage formel clair . une théorie récursivement axiomatisable , cohérente et capable de « formaliser l&apos; arithmétique » , est algorithmiquement indécidable . les conditions précises du théorème sont celles du théorème de gödel-rosser . si l&apos; on examine ces conditions , on se rend compte qu&apos; elles sont réalisées par une théorie finiment axiomatisable , et donc on obtient une réponse négative au problème de la décision dans le langage de l&apos; arithmétique ( on peut prendre 0 , 1 , + , × ) . théorème de church — le calcul des prédicats égalitaire du premier ordre dans le langage de l&apos; arithmétique est algorithmiquement indécidable . on en déduit par codage une réponse négative pour le problème de la décision dès que le langage contient un symbole de prédicat binaire ( en plus de l&apos; égalité ) . par contre , si le langage ne contient que des symboles de prédicats unaires et des symboles de constante ( pas de symboles de fonction ) , alors le calcul des prédicats égalitaire du premier ordre correspondant , le calcul des prédicats monadiques du premier ordre , est décidable . par ailleurs , il existe des théories décidables dont le langage contient un symbole de prédicat binaire : la théorie des ordres denses ( celle de q l&apos; ensemble des rationnels dans le seul langage de l&apos; ordre ) pour prendre un exemple très simple , ou encore l&apos; arithmétique de presburger à laquelle on peut ajouter sans dommage la relation d&apos; ordre , qui se définit avec l&apos; addition . pour répondre à la question , surtout pour y répondre négativement , il fallait cependant que la notion de fonction calculable , c ’ est-à-dire calculable mécaniquement , par un algorithme , soit formalisée . cela s&apos; est fait en plusieurs étapes . plusieurs modèles de calcul , que l&apos; on dirait maintenant turing-complets , sont apparus dans les années 1930 . on peut citer les fonctions λ-calculables d&apos; alonzo church ( 1930 ) , les fonctions récursives générales de herbrand et gödel ( gödel 1934 , en précisant une idée de herbrand 1931 ) , les machines de turing ( 1936 ) , les systèmes de post ( 1936 ) , les fonctions récursives au sens de kleene ( 1936 ) … tous ces modèles se sont révélés équivalents , ce qui est un argument pour la thèse de church ( 1936 ) : on a bien capturé par l&apos; un de ces modèles la notion de fonction calculable . pour montrer l&apos; indécidabilité de l&apos; arithmétique , l&apos; argumentation d&apos; alan turing est la suivante . supposons que nous ayons un algorithme de décision pour l&apos; arithmétique de peano . la question de savoir si une machine de turing donnée s&apos; arrête ou non , peut être formulée comme un énoncé du premier ordre ( on utilise les méthodes développées par gödel ) , lequel serait alors résolu par l&apos; algorithme de décision . mais turing avait prouvé précédemment qu&apos; il n&apos; y a pas d&apos; algorithme général pour décider de l&apos; arrêt d&apos; une machine de turing . ( en ) alonzo church , « a note on the entscheidungsproblem » , journal of symbolic logic , vol. 1 , ‎ &lt; time &gt; 1936 &lt; / time &gt; , p. 40-41 , correction p. 101-102 .
