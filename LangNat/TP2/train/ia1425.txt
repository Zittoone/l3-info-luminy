aidez à ajouter des liens en plaçant le code &#91; &#91; ontoclean &#93; &#93; dans les articles relatifs au sujet . ontoclean est , en informatique , une méthode d&apos; analyse d&apos; ontologie , développée par nicola guarino et chris welty , basée sur des propriétés de classes formelles et indépendantes de tout domaine ( les métapropriétés ) . ontoclean a été la première tentative de formalisation de notions d&apos; analyse ontologique appliquée aux systèmes d&apos; information . l&apos; idée était d&apos; offrir une justification aux décisions qu&apos; un concepteur d&apos; ontologie chevronné est typiquement amené à prendre , et d&apos; expliquer les erreurs courantes des débutants . alan rectoralan rector , dit , lors d&apos; un débat à la conférence kr-2002 de toulouse : « ces travaux m&apos; ont permis de réduire le temps passé à argumenter avec les médecins » . les notions sur lesquelles se sont concentrées guarino &amp; welty sont tirées d&apos; ontologies philosophiques . ils ne cherchaient pas l&apos; ontologie universelle source d&apos; éternels débats , mais plutôt les techniques utilisées par ces philosophes pour analyser , justifier et critiquer leurs ontologies . ces techniques ont peu , voire aucune , adhérence à une ontologie particulière , mais mettent en évidence ce qui ne sont souvent que des distinctions subtiles . les idées sous-jacentes d&apos; ontoclean sont d&apos; abord apparues dans une série de trois articles publiés en 2000template : en nicola guarino , chris welty , template : lang , template : p. 219-223 , août 2000 . , template : en nicola guarino , chris welty , template : lang , berlin , springer lncs , template : vol . 1937 / 2000 , template : p. 97-112 , octobre 2000 . le nom ontoclean n&apos; apparaît pas dans une publication avant 2002template : en nicola guarino , chris welty , template : lang . 2002 ; 45 ( 2 ) / 61-65 , new york , acm press . selon thompson-isi , le travail sur ontoclean fut le plus cité dans les articles académiques sur l&apos; ontologietemplate : lien web . ontoclean constitua un apport important car il s ’ agissait de la première méthode formelle de l&apos; ingénierie ontologique , appliquant des principes scientifiques à un domaine où les pratiques relevaient jusque là principalement de l&apos; art. en logique , une propriété est un prédicat unaire en intention , ou dit autrement , une propriété incarne ce que veut dire être membre d&apos; une classe . nous dirons par exemple que les instances de la classe personne ont une propriété « être une personne » . en web sémantique , une propriété est une relation binaire . la distinction entre propriété et classe est subtile et n&apos; est probablement pas vitale pour comprendre ontoclean , toutefois cet article , suit les publications sur ontoclean et utilise le terme « propriété » dans son acceptation d&apos; origine et en conséquence , « propriété » et « classe » pourront être considérés synonymes . ainsi , une méta-propriété est la propriété d&apos; une propriété ou classe . les bases d&apos; ontoclean reposent sur des propriétés de classe indépendantes de tout domaine , initialement au nombre de quatre : identité , unité , rigidité et dépendance . des travaux récents de welty et bill andersen ont ajouté les méta-propriétés permanence et réalité ( actuality en anglais ) . la notion d&apos; identité est fondamentale en ontologie , et tout particulièrement pour les ontologies de système d&apos; information . l&apos; identité est bien connue en métaphysique et en modélisation conceptuelle de base de données . pour ce dernier , il est de bonne pratique de déclarer une clef primaire pour les lignes d&apos; une table . si deux lignes ont une même clef primaire , alors elles sont considérés être une même ligne . plus important en ontologie est la question des identités qui exposent l&apos; existence , ou tout du moins le besoin de représenter , d&apos; autres entités . la problématique est ici de trouver les cas où une entité serait à la fois identique et différente . l&apos; exemple classique est celui d&apos; une certaine quantité d&apos; argile modelée en forme de statue . si vous utilisez la même argile , mais en la remodelant en quelque chose d&apos; autre qu&apos; une statue , s&apos; agit-il de la même entité ? sinon , comment pourrait-il s&apos; agir de la même entité ? en modélisation conceptuelle , il est entendu qu&apos; il faut , lorsque ce genre d ’ ambiguïté survient , considérer qu&apos; il y a deux entités différentes de manière à prendre en compte la situation où un élément change et un autre non . pour ontoclean , les critères d&apos; identité ( identity criteria ) sont associés avec , ou portés par certaines classes d&apos; entité appelées sortals qui sont une classe dont toutes les instances sont identifiées de la même manière . dans les systèmes d&apos; information , ces critères sont souvent extrinsèques , comme un numéro de sécurité sociale , ou un identifiant universellement unique , et ne sont pas intéressant du point vue ontologique . les critères d&apos; identités devraient être informatifs et aider à comprendre la signification d&apos; une classe . un triangle , par exemple , peut être identifié par la longueur de ses trois côtés , ou par deux côtés et un angle intérieur , ou etc. cela nous dit beaucoup sur ce qu&apos; on « entend » ici par la classe triangle , par exemple le même triangle peut être à différents endroit au même moment . quelqu&apos; un d&apos; autre pourrait avoir une ontologie dans laquelle la classe triangle a d&apos; autres critères d&apos; identité , de tel manière que des dessins différents correspondent toujours à des triangles différents , même s&apos; ils ont la même taille . le critère d&apos; identité ( et ontoclean , sur ce point ) ne vous dit pas si une de ces deux définitions est juste ou erronée , mais seulement qu&apos; elles sont différentes et que donc les classes sont différentes . les critères d&apos; identité et les sortals sont intuitivement conçus pour prendre en compte l&apos; habitude linguistique consistant à associer l&apos; identité à certaines classes . dans l&apos; exemple classique de la statue &quot; de bronze &quot; , nous disons naturellement le même « bronze » ou la même statue , indiquant qu&apos; il y a des critères d&apos; identité spécifiques à chaque classe . être un sortal , la première des méta-propriétés d&apos; ontoclean , est représenté selon la notation d&apos; origine par + i en exposant ( -i pour non-sortals ) associé à une classe . + i ( mais pas – i ) se transmet par héritage de telle sorte que si une classe est un sortal alors toutes ses sous classes le sont également . certaines propriétés ne s&apos; appliquent qu&apos; à des éléments qui sont un tout . en ontologie formelle , cette notion est souvent distinguée de celle de simple total ( mere sums ) , correspondant à des entités dont les limites sont , d&apos; une certaine manière , arbitraires . considérons par exemple la classe argile . une instance de cette classe peut être n&apos; importe quelle quantité de ce matériaux ( il ne s&apos; agit bien sûr que d&apos; une signification possible ) , de telle sorte que n&apos; importe quel ( en fait , tout ) sous-ensemble arbitraire de cette quantité est une instance différente de la classe argile . par contraste , les instances de la classe personne ne sont typiquement pas décomposables de cette manière . pour les besoins d&apos; ontoclean , un tout est un élément dont toutes les parties sont reliées entre elles et seulement entre elles par une quelconque relation distinguée . cette relation peut être vue comme une relation de « connexion généralisée » . les simples totaux n&apos; ont pas de telle relation étant donné que toute décomposition d&apos; un simple total est connectée à toute plus grande somme , qui n&apos; est pas un de ses constituants par la même relation . la méta-propriété unité , représentée par + u , désigne les classes dont toutes les instances sont des « tout » par une même relation . comme pour l&apos; identité , ontoclean n&apos; impose pas que la relation elle-même soit spécifiée , car il suffit souvent de savoir que la relation existe . de manière intuitive , une classe a la méta-propriété unité si toutes ses instances ont le même type de tout , ce qui est classiquement le cas pour tous les objets physiques . la non-unité , représentée par -u , désigne les classes dont les instances ne sont pas toutes des tout , ou alors pas selon la même relation . la méta-propriété anti-unité , représentée par ~ u , désigne les classes dont aucune instance n&apos; est un tout , comme les classes de simple total . + u et ~ u ( mais pas -u ) se transmettent entre classes par héritage . il y a de nombreuses approches logiques pour ce dilemme classique ( incluant celle de simplement l&apos; ignorer ) . la plus courante est de considérer certaines propriétés comme étant essentielles ; une propriété essentielle d&apos; une entité est une propriété qui ne peut pas changer , et pour laquelle la loi de leibniz s&apos; applique . les autres propriétés d&apos; une entité , qui elles peuvent changer , sont non-essentielles et ne sont pas impliquées dans l&apos; identité . certaines propriétés sont essentielles pour toutes leurs instances . pensez à la propriété &quot; être une personne &quot; , habituellement représentée par la classe personne . cette propriété est fondamentale pour toutes les entités ayant cette propriété . donc au moins une des propriétés n&apos; ayant pas changé à mon sujet quand je coupe ma barbe est que je suis une personne . ces propriétés , qui sont essentielles à toutes leurs instances , sont des propriétés rigides . les propriétés rigides sont désignées par + r , et celles qui ne sont pas rigide par – r. une spécialisation importante des propriétés non-rigide est les propriétés anti-rigide ( ~ r ) , qui sont les propriétés qui sont obligatoirement changeables . pensez à &quot; être un étudiant &quot; . tous les étudiants doivent pouvoir ne pas être un étudiant . ~ r ( mais pas – r ou + r ) est hérité dans une hiérarchie de classe . rigidité ne dois pas être confondue avec la notion de désignation rigide définie par kripke , qui est particulière . ontoclean utilise le terme rigide pour décrire une instance de lien entre une instance et une classe rigide et ne peut être rompu . la notion de dépendance est variante . dans les papiers fondateurs d&apos; ontoclean , guarino &amp; welty utilisent un type de dépendance capturant les méta-propriétés de certains rôles relationnels . une propriété est dépendante si chaque instance implique l&apos; existence d&apos; une autre entité . la propriété étudiant , par exemple , est dépendante , puisque pour être étudiant il doit y avoir un professeur ; pour chaque instance d&apos; étudiant il y a au moins une instance de professeur . dans des travaux postérieurs pour &#91; dolce &#93; on dit qu&apos; il subsume deux types de propriétés dépendantes : dépendance « spécifique » constante et dépendance « générique » constante . ce dernier correspond au cas étudiant / professeur où toute instance de professeur convient . il existe beaucoup d&apos; autres types de dépendancevoir &#91; fine and smith , 1983 &#93; et particulièrement &#91; simons , 1987 &#93; . les adapter à ontoclean demeure un problème ouvert . être dépendant est indiqué par + d , et être indépendant par -d . + d ( mais pas -d ) est transmis par héritage .
