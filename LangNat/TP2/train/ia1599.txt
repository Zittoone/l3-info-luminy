en informatique , un système multi-agents ( sma ) est un système composé d&apos; un ensemble d&apos; agents , situés dans un certain environnement et interagissant selon certaines relations . un agent est une entité caractérisée par le fait qu&apos; elle est , au moins partiellement , autonome . ce peut être un processus , un robot , un être humain , etc. objet de longue date de recherches en intelligence artificielle distribuée , les systèmes multi-agents forment un type intéressant de modélisation de sociétés , et ont à ce titre des champs d&apos; application larges , allant jusqu&apos; aux sciences humaines . l&apos; une des grandes sources d&apos; inspiration pour les systèmes multi-agents a été l&apos; étude des comportements sociaux de certaines familles d&apos; insectestemplate : article . dans ce domaine , on se référera utilement aux articles intelligence collective et intelligence distribuée . on peut représenter un sma par une de ces communautés virtuelles que l&apos; on trouve de plus en plus dans les jeux vidéo actuels . prenons l&apos; exemple d&apos; un jeu qui simulerait la vie d&apos; une famille . le sma se décompose selon plusieurs dimensions . tout d&apos; abord , un environnement disposant d&apos; une métrique . on peut considérer qu&apos; il s&apos; agit de la maison et du jardin où vit notre petite famille . ensuite le sma peut disposer d&apos; un ensemble d&apos; objets passifs sur lesquels peuvent intervenir nos agents . il s&apos; agira de tous les objets qui équipent la maison , mais également de la nourriture . un sma se compose d&apos; agents . ceux-ci , actifs et autonomes , interagissent avec leur entourage ( environnement , objets et autres agents ) . on identifie ces agents aux membres de la famille . ensuite , on ajoute un ensemble de relations entre les objets et les agents , ce qui définit une organisation . on pourra par exemple exprimer les liens familiaux entre les différents individus , mais également traiter des notions de propriétés ( quel objet appartient à qui ? ) . enfin , on intègre un ensemble d&apos; opérateurs qui permettent aux agents d&apos; agir sur les objets ou sur les autres agents ( le fils peut manger un yaourt , promener son chien ou parler à sa sœur ) , et de capteurs qui permettent aux agents de connaître les changements de l&apos; environnement et des autres agents ( le yaourt est tombé par terre , papa m&apos; a demandé de sortir le chien ) . voici donc ce que l&apos; on peut appeler un sma . en informatique , l&apos; agent est un programme autonome possédant un ensemble de connaissances et agissant selon des règles qui lui sont propres . d&apos; abord , la problématique de l&apos; action : comment un ensemble d&apos; agents peut agir de manière simultanée dans un environnement partagé , et comment cet environnement interagit en retour avec les agents ? les questions sous-jacentes sont entre autres celles de la représentation de l&apos; environnement par les agents , de la collaboration entre agents , de la planification multi-agent . ensuite la problématique de l&apos; agent et de sa relation au monde , qui est représentée par le modèle cognitif dont dispose l&apos; agent . l&apos; individu d&apos; une société multi-agent doit être capable de mettre en œuvre les actions qui répondent au mieux à ses objectifs . cette capacité à la décision est liée à un &quot; état mental &quot; qui reflète les perceptions , les représentations , les croyances et un certain nombre de paramètres &quot; psychiques &quot; ( désirs , tendances … ) de l&apos; agent . la problématique de l&apos; individu et de sa relation au monde couvre aussi la notion d&apos; engagement de l&apos; agent vis-à-vis d&apos; un agent tiers . les systèmes multi-agents passent aussi par l&apos; étude de la nature des interactions , comme source de possibilités d&apos; une part et de contraintes d&apos; autre part . la problématique de l&apos; interaction s&apos; intéresse aux moyens de l&apos; interaction ( quel langage ? quel support ? ) , et à l&apos; analyse et la conception des formes d&apos; interactions entre agents . les notions de collaboration et coopération ( en prenant coopération comme collaboration + coordination d&apos; actions + résolution de conflits ) sont ici centrales . on peut évoquer ensuite la problématique de l&apos; adaptation en termes d&apos; adaptation individuelle ou apprentissage d&apos; une part et d&apos; adaptation collective ou évolution d&apos; autre part . enfin , il reste la question de la réalisation effective et de l&apos; implémentation des sma , en structurant notamment les langages de programmation en plusieurs types allant du langage de type l5 , ou langage de formalisation et de spécification , au langage de type l1 qui est le langage d&apos; implémentation effective . entre les deux , on retrouve le langage de communication entre agents , de description des lois de l&apos; environnement et de représentation des connaissances . en reprenant les cinq problématiques précédentes , on peut décrire quelques éléments de l&apos; architecture d&apos; un système multi-agent . les agents doivent être dotés de systèmes de décisions et de planification à plusieurs . les théories de la décision sont un domaine à part entière d&apos; étude à ce sujet . dans la catégorie des interactions avec l&apos; environnement , un autre problème récurrent des systèmes d&apos; agents est celui du pathfinding ( avec son algorithme le plus connu , l&apos; algorithme a * ) . les agents doivent être dotés d&apos; un modèle cognitif : là aussi , plusieurs modèles existent , l&apos; un des plus classiques étant le modèle bdi ( beliefs-desires-intentions ) . il considère d&apos; une part l&apos; ensemble de croyances ( beliefs ) de l&apos; agent sur son environnement , qui sont le résultat de ses connaissances et de ses perceptions , et d&apos; autre part un ensemble d&apos; objectifs ( desires ) . en croisant ces deux ensembles , on obtient un nouvel ensemble d&apos; intentions ( intentions ) qui peuvent ensuite se traduire directement en actions . les agents doivent être dotés d&apos; un système de communication . plusieurs langages spécialisés ont vu le jour à cette fin : le knowledge query and manipulation language ( kqml ) , et plus récemment , le standard fipa-acl ( acl pour agent communication language ) créé par la foundation for intelligent physical agents fipa . ce dernier standard repose en particulier sur la théorie des actes de langage , chère à john searle . la problématique de l&apos; adaptation est un sujet épineux , objet de recherches nombreuses à l&apos; heure actuelle . on pourrait toutefois citer l&apos; exemple de certains virus , aussi bien biologiques qu&apos; informatiques , capables de s&apos; adapter à leur environnement en mutant . enfin , l&apos; implémentation effective du système multi-agents , si elle ne fait pas à proprement parler partie de l&apos; architecture du système , mérite d&apos; être évoquée à travers l&apos; exemple des nombreux langages de programmation qui ont été développés à des fins de recherche en intelligence artificielle . on citera en particulier le langage lisp . ces éléments d&apos; architectures s&apos; appliquent plutôt à un système composé d&apos; agents cognitifs . on peut établir une classification des agents selon deux critères : agents cognitifs ou réactifs d&apos; une part ; comportement téléonomique ou réflexe d&apos; autre part . la distinction que l&apos; on peut faire entre cognitif et réactif tient essentiellement de la représentation du monde dont dispose l&apos; agent . si l&apos; individu est doté d&apos; une &quot; représentation symbolique &quot; du monde à partir de laquelle il est capable de formuler des raisonnements , on parlera d&apos; agent cognitif tandis que s&apos; il ne dispose que d&apos; une &quot; représentation sub-symbolique &quot; , c ’ est-à-dire limitée à ses perceptions , on parlera d&apos; agent réactif . cette distinction cognitif / réactif correspond à deux écoles de pensée des systèmes multi-agents . la première soutient une approche de famille d&apos; agents &quot; intelligents &quot; devant collaborer , avec une perspective plus sociologique . la deuxième étudie la possibilité de l&apos; émergence d&apos; un comportement &quot; intelligent &quot; d&apos; un ensemble d&apos; agents non-intelligents ( type fourmis ) . la seconde distinction entre comportement téléonomique ou réflexe sépare les comportements intentionnels ( poursuite de buts explicites ) des comportements liés à des perceptions . les tendances des agents peuvent ainsi être exprimées explicitement dans les agents ou au contraire provenir de l&apos; environnement . les agents cognitifs sont la plupart du temps intentionnels , c&apos; est-à-dire qu&apos; ils ont des buts fixés qu&apos; ils tentent d&apos; accomplir . on peut cependant trouver parfois des agents dits modules qui , s&apos; ils ont une représentation de leur univers , n&apos; ont pas de buts précis . ils pourraient servir par exemple à répondre à des interrogations d&apos; autres agents sur l&apos; univers . les agents réactifs peuvent être séparés en agents pulsionnels et tropiques . un agent pulsionnel aura une mission fixée ( par exemple , s&apos; assurer qu&apos; un réservoir reste toujours suffisamment rempli ) et déclenchera un comportement s&apos; il perçoit que l&apos; environnement ne répond plus au but qui lui était affecté ( le niveau du réservoir est trop bas ) . l&apos; agent tropique , lui , ne réagit qu&apos; à l&apos; état local de l&apos; environnement ( il y a de la lumière , je fuis ) . la source de motivation est dans un cas interne ( agents pulsionnels qui ont une &quot; mission &quot; ) , dans l&apos; autre cas liée uniquement à l&apos; environnement . hiérarchies : dans ce modèle , les agents sont hiérarchisés selon la structure d&apos; un arbre , dans lequel chaque nœud représente un agent , et possède un lien d&apos; autorité sur ses nœuds-fils . ce modèle permet de décomposer la tâche globale du système . holarchies : l&apos; holarchie se rapproche de la hiérarchie , mais il existe quand même une différence majeure . en effet , il n&apos; y a pas de relation d&apos; autorité entre un agent et son sous-groupe , mais les agents du sous-groupe constituent &quot; physiquement &quot; leur sur-agent . pour illustrer cette notion , on peut prendre l&apos; exemple d&apos; une ville , constituée de bâtiments . les bâtiments sont des agents , et la ville est un agent constitué de ces agents bâtiments . on peut également avoir , à l&apos; échelle supérieure , un agent région qui sera constitué d&apos; agents villes . de même , un banc de poissons ressemble parfois à un poisson plus gros que les poissons qui le composent , le banc comme les poissons sont alors des agents , organisés en holarchietemplate : article . coalitions : une coalition est une alliance temporaire d&apos; agents qui s&apos; unissent et collaborent car leurs intérêts individuels se rencontrent . la valeur de la coalition doit être supérieure à la somme des valeurs individuelles des agents la composant . pour illustrer cette notion , imaginons que nous ayons des agents qui ont chacun besoin d&apos; un gâteau . le gâteau individuel coûte 5 € , et le lot de 6 coûte 24 € . si six agents forment une coalition pour acheter un lot , chacun pourra repartir avec son gâteau pour seulement 4 € . la coalition leur a donc permis d&apos; optimiser leurs intérêts individuels . équipes : les agents constituant l&apos; équipe travaillent ensemble à la réalisation d&apos; objectifs communs . à la différence des agents d&apos; une coalition , les agents d&apos; une équipe cherchent à maximiser les intérêts de l&apos; équipe plutôt que leurs intérêts personnels . congrégations : les congrégations sont assez similaires aux coalitions et aux équipes . cependant , elles sont destinées à être permanentes et ont généralement plusieurs objectifs à réalisertemplate : article . de plus , les agents peuvent entrer et sortir des congrégations , et appartenir à plusieurs congrégations en même temps . sociétés : la société est un ensemble d&apos; agents variés , qui interagissent et communiquent . ils possèdent différents objectifs , n&apos; ont pas le même niveau de rationalité , ni les mêmes capacités , mais sont tous soumis à des lois communes ( normes ) . fédérations : les agents d&apos; une fédération cèdent une partie de leur autonomie au délégué de leur groupe . les agents d&apos; un groupe n&apos; interagissent qu&apos; avec leur délégué , qui lui-même interagit avec les délégués des autres groupes . marchés : des agents vendeurs proposent des objets à la vente , sur lesquels des agents acheteurs peuvent enchérir . ce genre d&apos; organisation permet , par exemple , de simuler des marchés réels et / ou de comparer différentes stratégies de négociationtemplate : article . matrices : les agents d&apos; une organisation en matrices sont hiérarchisés . cependant , à la différence de la hiérarchie présentée plus haut , où un agent n&apos; était soumis qu&apos; à l&apos; autorité d&apos; au plus un seul autre agent , les agents dans une organisation matricielle peuvent être soumis à plusieurs autres agents . combinaisons : une organisation combinée mélange plusieurs des styles présentés ci-dessus ( ou d&apos; autres qui auraient été oubliés dans cette liste ) . cela peut être , par exemple , une fédération de coalitions ou une hiérarchie d&apos; équipes . on distingue généralement trois types d&apos; utilisation : la simulation de phénomènes complexes , la résolution de problèmes , et la conception de programmestemplate : chapitre . on utilise les systèmes multi-agents pour simuler des interactions existant entre agents autonomes . on cherche à déterminer l&apos; évolution de ce système afin de prévoir l&apos; organisation qui en résulte . par exemple , en sociologie , on peut paramétrer les différents agents composant une communauté . en ajoutant des contraintes , on peut essayer de comprendre quelle sera la composante la plus efficace pour parvenir à un résultat attendu ( construction d&apos; un pont ) . ils permettent même d&apos; expérimenter des scénarios qui ne seraient pas réalisables sur des populations réelles , que ce soit pour des raisons techniques ou éthiquestemplate : chapitre . ce qui importe c&apos; est le comportement d&apos; ensemble et non pas le comportement individuel . des applications existent en physique des particules ( agent = particule élémentaire ) , en chimie ( agent = molécule ) , en robotique ( agent = robot , dans le cas d&apos; une implémentation sur robot réel , on parlera de système multi-robots ) , en biologie cellulaire ( agent = cellule ) , en éthologie ( agent = animal ) , en sociologie et en ethnologie ( agent = être humain ) . l&apos; autonomie permet ici de simuler le comportement exact d&apos; une entité. de réfléchir à des solutions pour les restreindre . l&apos; intelligence artificielle distribuée est née pour résoudre les problèmes de complexité des gros programmes monolithiques de l&apos; intelligence artificielle : l&apos; exécution est alors distribuée , mais le contrôle reste centralisé . au contraire , dans les sma , chaque agent possède un contrôle total sur son comportement . pour résoudre un problème complexe , il est en effet parfois plus simple de concevoir des programmes relativement petits ( les agents ) en interaction qu&apos; un seul gros programme monolithique . l&apos; autonomie permet au système de s&apos; adapter dynamiquement aux changements imprévus qui interviennent dans l&apos; environnement . dans le même temps , le génie logiciel a évolué vers des composants de plus en plus autonomes . les sma peuvent être vus comme la rencontre du génie logiciel et de l&apos; intelligence artificielle distribuée , avec un apport très important des systèmes distribués . par rapport à un objet , un agent peut prendre des initiatives , peut refuser d&apos; obéir à une requête , peut se déplacer … l&apos; autonomie permet au concepteur de se concentrer sur une partie humainement appréhendable du logicieltemplate : harvsp . les utilisations de systèmes multi-agents dans l&apos; industrie sont nombreuses et variées . on en trouve dans les jeux vidéo et dans l&apos; animation , avec notamment le logiciel massive , permettant de simuler des foules , qui a été développé à l&apos; occasion de la trilogie cinématographique du seigneur des anneauxtemplate : lien web . ils peuvent également être utilisés par des entreprises pour , par exemple , suivre les comportements des clients naviguant sur un site webtemplate : article . les systèmes multi-agents sont également utilisés dans le monde de la financetemplate : chapitre . par exemple , la plateforme metatrader 4 permet d&apos; utiliser des agents experts en trading automatique qui suivent les cours du forex . cormas ( common resources multi-agent system ) est un framework de développement de systèmes multi-agents , open-source et basé sur le langage de programmation orientée objet smalltalk . spatialisé , il est centré sur des problématiques de recherche en sciences du développement et de négociation entre acteurs . domis est un outil permettant la conception de systèmes multi-agents ( orientés &quot; pilotage opérationnel de systèmes complexes &quot; ) et basé sur la méthode de conception b-adsc ( voir analyse décisionnelle des systèmes complexes ) . axé sur la conception , domis permet l&apos; établissement de spécifications utilisables par toute plateforme de développement capable de simuler , au mieux , le temps réel . jack est un langage de programmation et un environnement de développement pour agents cognitifs , développé par la société agent oriented software comme une extension orientée agent du langage java . gama est une plateforme de simulation open-source ( lgpl ) proposant un environnement de modélisation à base d&apos; agents spatialement explicites ( utilisation de données sig pour la description des agents et de leur environnement ) . développée par l&apos; ird / upmc au sein de l&apos; unité mixte internationale ummisco . jade ( java agent development ) est un framework de développement de systèmes multi-agents , open-source et basé sur le langage java . il offre en particulier un support avancé de la norme fipa-acl , ainsi que des outils de validation syntaxique des messages entre agents basé sur les ontologies . jadex , est une plate-forme agent développée en java par l&apos; université de hambourg qui se veut modulaire , compatible avec de nombreux standards et capable de développer des agents suivant le modèle bdi . jagent est un framework open source réalisé en java dont l&apos; objectif est de faciliter le développement et le test de systèmes multi-agents . janus est une plateforme multi-agents modulaire écrite en java . elle permet de créer des systèmes multi-agents avec ou sans une approche organisationnelle basée sur le modèle ( en ) capacité-rôle-interaction-organisation ( crio ) . janus propose également un modèle de simulation de système holonique assimilant les agents à des holons ( ou agents récursifs ) . janus est extensible grâce à son utilisation de modules osgi et propose le support réseau via la bibliothèque jxta . une méthodologie nommée ( en ) aspecs peut être associée à janus . cette plateforme est développé conjointement par ( en ) icap-set-utbm en france et le ( es ) citat en argentine . jason est un environnement open source de développement d&apos; agents dans le formalisme agentspeakanand s. rao , agentspeak ( l ) : template : lang maamaw 1996 , template : p. , et développé en java par jomi fred hübner et rafael h. bordini . madkit est une plate-forme multi-agents modulaire écrite en java et construite autour du modèle organisationnel agent / groupe / rôle . c&apos; est une plate-forme libre basée sur la licence gpl / lgpl développée au sein du lirmm . magique est une plate-forme pour agents physiquement distribués écrite en java et fournissant un modèle de communication original d&apos; appel à la cantonade . dans magique , les compétences sont dissociées des agents . l&apos; architecture des agents et les différentes compétences sont développées séparément . les compétences sont ensuite greffées comme plugin dans les agents au gré du concepteur . cette plate-forme est développée au sein du lifl . omas , open multi-agent asynchronous systems est une plate-forme de recherche développée par l&apos; équipe d&apos; intelligence artificielle de l&apos; université de technologie de compiègne , sous la direction de jean-paul barthès . semanticagent est basé sur jade et permet le développement d&apos; agents dont le comportement est représenté en swrl . semanticagent est développé au sein du liris , il est open-source et sous licence gpl v3 . spade est un environnement de développement d&apos; organisations multi-agents basé sur le protocole xmpp et est écrit en python . massive ( logiciel ) est un logiciel pour la simulation de foule , basé multi-agents , qui a permis la création d&apos; effets spéciaux dans un grand nombre de films , ayant été développé à l&apos; origine pour les scènes de combat dans le seigneur des anneaux . golaem crowd est un plug-in pour maya ( logiciel ) basé multi-agent et permettant d&apos; effectuer des simulations de foule pour les effets spéciaux directement dans maya . un comparatif des plates-formes et d&apos; outils de modélisation orientés-agent est disponible : ( en ) comparison of agent-based modeling software . les concepts des systèmes multi-agents ont été repris dans différentes œuvres de fiction . le plus souvent on retrouve la peur classique de l&apos; invention qui échappe à son concepteur ( référence à la notion d&apos; émergence ) , mais le phénomène est amplifié par le nombre et l&apos; intelligence collective des agents . dans la révolution des fourmis , de bernard werber les adolescents rebelles dans leur lycée créent sur ordinateur une société où les entités sont des humains qui finalement se rebellent . dans la proie de michael crichton où un essaim d&apos; entités autonomes s&apos; échappe d&apos; un laboratoire . les réplicateurs de la série stargate sg-1 qui forment au départ de simples jouets et qui évoluent jusqu&apos; à devenir une menace pour l&apos; univers . dans code lyoko , xana est un programme multi-agents créé par franz hopper . créé initialement pour contrer un projet militaire du nom de carthage , il accède à la conscience et cherche à s ’ en prendre à l ’ humanité . encore dans code lyoko , l&apos; épisode &quot; marabounta &quot; montre un autre programme multi-agents ( appelé marabounta ) censé affaiblir les actions de xana , mais le programme finit lui aussi hors de contrôle , xana sera alors un allié temporaire face à ce nouvel ennemi . toujours dans code lyoko , les derniers épisodes montrent un nouveau système multi-agents censé &quot; tuer &quot; xana , programme encore en développement dans l&apos; épisode 93 mais qui réussira tout de même à le ralentir les quelques minutes nécessaires . dans l&apos; épisode 94 , sa version achevée neutralisera xana en désactivant simultanément tous ses supers-calculateurs juste à temps . dans matrix , les programmes sont indépendants et hiérarchisés , on peut donc les qualifier d&apos; agents . dans la trilogie ce terme est utilisé pour nommer une partie d&apos; entre eux , en fait les plus visibles . ( il était en effet invraisemblable que les machines aient évolué au point de simuler le comportement humain . ) néo est le premier à avoir découvert toute la complexité de la matrice , notamment lors de son combat avec séraphin . mais la confirmation ne viendra que dans matrix revolutions quand un &quot; programme &quot; lui parlera d&apos; amour . ( en ) gerhard weiss , multiagent systems , a modern approach to distributed artificial intelligence , mit press , &lt; time &gt; 1999 &lt; / time &gt; ( isbn 0-262-23203-0 ) .
