un système d&apos; argumentation est un moyen pour un agent de gérer des informations conflictuelles et d&apos; en tirer des conséquences . dans un système d&apos; argumentation abstraittemplate : article , l&apos; information de base est un ensemble d&apos; arguments abstraits ( qui peuvent par exemple représenter une donnée , une proposition ) , et les conflits entre arguments sont représentés au moyen d&apos; une relation binaire sur l&apos; ensemble d&apos; arguments . concrètement , on représente un système d&apos; argumentation au moyen d&apos; un graphe orienté tel que les nœuds représentent les arguments et les attaques représentent la relation d&apos; attaque . on appelle ce cadre abstrait &quot; cadre de dung &quot; ou &quot; systèmes d&apos; argumentation à la dung &quot; , du nom de l&apos; auteur de l&apos; article de référence sur le sujet . il existe des extensions du cadre de dung , comme les systèmes d&apos; argumentation à base logiquetemplate : article ou les systèmes d&apos; argumentation valuéstemplate : article . par exemple , le système d&apos; argumentation s = \ langle a , r \ rangle avec a = \ { a , b , c , d \ } et r = \ { ( a , b ) , ( b , c ) , ( d , c ) \ } est composé de quatre arguments ( a , b , c \ text { et } d ) et de trois attaques ( a attaque b , b attaque c et d attaque c ) . un ensemble d&apos; arguments e est admissible si et seulement s&apos; il est sans conflit et tous ses arguments sont acceptables selon e. e est l&apos; unique extension de base de s si et seulement si c&apos; est le plus petit élément pour l&apos; inclusion ensembliste parmi les extensions complètes de s. dans le cas où le système est bien fondé ( c&apos; est-à-dire il n&apos; existe aucune suite infinie a _ 0 , a _ 1 , \ dots , a _ n , \ dots telle que \ forall i , ( a _ i , a _ { i + 1 } ) \ in r ) , toutes ces sémantiques coïncident : il n&apos; y a qu&apos; une seule extension qui est à la fois de base , stable , préférée et complète . on introduit la notation ext _ \ sigma ( s ) pour noter l&apos; ensemble des \ sigma-extensions du système s. dans le cas du système s représenté à la figure ci-dessus , ext _ \ sigma ( s ) = \ { \ { a , d \ } \ } pour toutes les sémantiques de dung : le système est bien fondé , d&apos; où la coïncidence des sémantiques , et les arguments acceptés sont dans ce cas ceux qui ne sont pas attaqués : a \ text { et } d. les labellings sont un moyen plus expressif que les extensions pour exprimer l&apos; acceptabilité des arguments . concrètement , un labelling est une fonction qui associe à tout argument une étiquette in ( qui indique que l&apos; argument est accepté ) , out ( qui indique que l&apos; argument est rejeté ) ou undec ( qui indique que l&apos; argument est indéfini : ni accepté , ni refusé ) . on peut aussi noter un labelling sous forme d&apos; un ensemble de couples ( \ mathit { argument } , \ mathit { \ acute { e } tiquette } ) . on peut convertir toute extension en reinstatement labelling en étiquetant in les arguments qui sont dans l&apos; extension , out ceux qui sont attaqués par un argument qui est in , et undec les autres . inversement , on peut construire une extension à partir d&apos; un reinstatement labelling en prenant l&apos; ensemble des arguments in . en effet , caminadatemplate : article a montré que les reinstatement labellings et les extensions complètes peuvent être associés bijectivement de cette façon . de plus , les autres sémantiques de dung peuvent être associés à certaines familles de reinstatement labellings . , il doit être in par définition , et s&apos; il n&apos; est attaqué que par des arguments in , alors il est out ) . l&apos; unique reinstatement labelling correspondant au système s représenté ci-dessus est l = \ { ( a , \ mathit { in } ) , ( b , \ mathit { out } ) , ( c , \ mathit { out } ) , ( d , \ mathit { in } ) \ } . inférence sceptique : l&apos; agent accept un argument s&apos; il appartient à toutes les \ sigma-extensions , dans ce cas l&apos; agent risque de ne pas déduire beaucoup d&apos; information ( si l&apos; intersection des extensions est vide ou de cardinal très petit ) . pour ces deux modes d&apos; inférence , on peut identifier l&apos; ensemble d&apos; arguments acceptés , respectivement cr _ \ sigma ( s ) l&apos; ensemble des arguments acceptés crédulement sous la sémantique \ sigma , et sc _ \ sigma ( s ) l&apos; ensemble des arguments acceptés sceptiquement sous la sémantique \ sigma ( le \ sigma peut être omis s&apos; il n&apos; y a pas d&apos; ambiguïté possible sur la sémantique ) . bien entendu , dans le cas où il n&apos; y a qu&apos; une extension ( par exemple , si le graphe ne comporte pas de cycle et est donc bien fondé ) , ce problème ne se pose pas : l&apos; agent accepte les arguments de l&apos; unique extension et rejette les autres . le même genre de raisonnement peut être effectué à partir des labellings correspondant à la sémantique choisie : un argument peut être accepté s&apos; il est in pour chaque labelling et refusé s&apos; il est out pour chaque labelling , les autres étant laissés dans un état indéterminé ( les statuts des arguments peuvent alors faire penser aux statuts épistémiques d&apos; une croyance dans le cadre de la dynamique des croyancestemplate : ouvrage ) . il existe plusieurs critères d&apos; équivalence entre systèmes d&apos; argumentation . la plupart des critères étudiés portent sur les ensembles d&apos; extensions ou sur les arguments inférés à partir de ces ensembles . l&apos; équivalence forte template : article considère comme équivalents deux systèmes s _ 1 \ text { et } s _ 2 si et seulement si pour tout autre système s _ 3 , l&apos; union de s _ 1 avec s _ 3 est équivalente ( pour un critère donné ) à l&apos; union de l&apos; union de s _ 2 avec s _ 3l&apos; union de deux systèmes représente ici le système issu de l&apos; union des ensembles d&apos; arguments et de l&apos; union des relations d&apos; attaque. les systèmes d&apos; argumentation valués , dans lesquels on associe aux arguments une valeur . \ phi est un ensemble minimal de \ delta satisfaisant les deux premiers points , où \ delta est un ensemble de formules utilisées par l&apos; agent pour raisonner . on appelle \ phi le support et \ alpha la conclusion de l&apos; argument ( \ phi , \ alpha ) . relation rebuttal : ( \ psi , \ beta ) attaque ( \ phi , \ alpha ) si et seulement si \ beta \ leftrightarrow \ neg \ alpha est une tautologie . une fois la relation d&apos; attaque choisie , on peut construire un graphe et raisonner de façon similaire à ce qui se fait pour les systèmes d&apos; argumentation abstraits ( utilisation de sémantiques pour construire des extensions , inférence sceptique ou crédule ) , la différence étant que l&apos; information déduite d&apos; un système d&apos; argumentation à base logique sera cette fois un ensemble de formules : les conclusions des arguments qui sont dans les extensions . les systèmes d&apos; argumentation valués sont basés sur l&apos; idée que lors d&apos; un échange d&apos; arguments , certains peuvent être plus « forts » que d&apos; autres selon une certaine valeur qu&apos; ils avancent , et ainsi le succès d&apos; une attaque entre arguments dépend de la différence des forces de ces valeurs . formellement , un système d&apos; argumentation valué est un tuple vaf = \ langle a , r , v , val , valprefs \ rangle où a et r sont comme dans le cadre standard un ensemble d&apos; arguments et une relation binaire sur cet ensemble , v est un ensemble non-vide de valeurs , val est une fonction qui associe à chaque élément de a un élément de v , et valprefs est une relation de préférence ( transitive , irréflexive et asymétrique ) sur v \ times v. et ( val ( b ) , val ( a ) ) \ not \ in valprefs , c&apos; est-à-dire que la valeur avancée par b n&apos; est pas préférée à celle avancée par a. on remarque qu&apos; une attaque réussit si les deux arguments sont associés à la même valeur , ou s&apos; il n&apos; y a pas de préférence entre leurs valeurs respectives . ( en ) philippe besnard et anthony hunter , elements of argumentation , université du michigan , mit press , &lt; time &gt; 2008 &lt; / time &gt; , 298 p.
