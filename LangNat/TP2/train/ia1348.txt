lisp est la plus ancienne famille de langages de programmation à la fois impératifs et fonctionnelstemplate : lien conférence . développé initialement en tant que modèle pratique pour représenter des programmes ( par contraste avec la notion théorique de machine de turing ) , il est devenu dans les années 1970 et 80 le langage de choix pour la recherche en intelligence artificielle . les langages lisp sont aujourd&apos; hui utilisés dans de nombreux domaines , de la programmation web à la finance &#91; 1 &#93; . , et dans certains cursus de formation en informatiquedescription du cours template : lien web . le terme lisp a été forgé à partir de l&apos; anglais « list processing » ( « traitement de listes » ) . tous les dialectes de lisp partagent les mêmes opérateurs de manipulation de listes chaînées simples . lisp se distingue en outre par une syntaxe simple en notation préfixée , son typage dynamique des données , le support pour la programmation fonctionnelle , sa gestion automatique de la mémoire et la faculté de manipuler le code source en tant que structure de données . les langages lisp sont reconnaissables immédiatement à leur apparence . le code source des programmes est écrit en utilisant la même syntaxe que celle des listes — la syntaxe parenthésée des s-expressions . chaque sous-expression d&apos; un programme ( ou structure de données ) est délimitée par des parenthèses . cela simplifie grandement l&apos; analyse syntaxique des programmes lisp et rend simple la métaprogrammation — la création de programmes qui créent d&apos; autres programmes ou modifient le programme courant . si l&apos; on excepte le langage machine et le langage d&apos; assemblage ( ou plus communément « assembleur » ) , lisp est le deuxième langage le plus ancien ( juste après fortran ) parmi les langages qui se sont largement diffusés . lisp a beaucoup évolué depuis le début des années 1960 et a ainsi donné naissance à de nombreux dialectes . le langage lisp fut inventé par john mccarthy en 1958 alors qu&apos; il était au massachusetts institute of technology ( mit ) . il publia un article intitulé « recursive functions of symbolic expressions and their computation by machine , part i » john mccarthy , recursive functions of symbolic expressions and their computation by machine , part i , communications of the acm , vol . 3 issue 4 , april 1960 template : doi ( soit « fonctions récursives d&apos; expressions symboliques et leur évaluation par une machine , partie i » ) dans la revue cacm en 1960 ; la partie ii ne fut jamais publiée. cdr ( contents of decrement register ) : le reste de la liste . l&apos; opération qui consiste à fabriquer une liste à partir d&apos; un premier élément et d&apos; une liste est notée cons . dans son article , john mccarthy introduit deux syntaxes : les s-expressions ( expressions symboliques , parfois appelées « sexp » ) et les m-expressions ( méta-expressions permettant l&apos; homoïconicité pour exprimer les fonctions manipulant des s-expressions autrement dit pour mettre en œuvre la réflexion ) . les m-expressions n&apos; ont jamais été très appréciées et la plupart des lisps de nos jours utilisent des s-expressions pour les programmes comme pour les données . c&apos; est la syntaxe des s-expressions qui fait reprocher à lisp son abondance de parenthèses , mais c&apos; est aussi une des raisons de la puissance et de la souplesse du langage . en raison de son expressivité et de sa flexibilité , lisp eut beaucoup de succès dans la communauté de l&apos; intelligence artificielle ( cf. apports ) . dans les années 1970 , on créa des ordinateurs spécialisés dans l&apos; exécution de programmes lisp : les machines lisp . durant les années 1980 et 1990 , on fit de grands efforts pour unifier les nombreux dialectes de lisp qui étaient apparus . le résultat fut la normalisation de common lisp dont la norme ansi fut publiée en 1994 sous la référence « ansi x3.226-1994 information technology programming language common lisp » . l&apos; iso publia de son côté en 1997 la norme islisp ( en ) catégorie : article contenant un appel à traduction en anglais iso / iec 13816 : 1997 ( e ) , révisée en 2007 par la norme iso / iec 13816 : 2007 ( e ) . à ce moment , lisp était bien moins florissant qu&apos; à sa grande époque . bien qu&apos; éclipsé par des langages proches de la machine ( c , c + + ) , lisp reste un langage relativement utilisé , en particulier en tant que langage embarqué dans des applications , où il sert de langage d&apos; extension . les cas les plus connus d&apos; utilisation embarquée de lisp sont l&apos; éditeur de textes emacs et le langage autolisp ( en ) catégorie : article contenant un appel à traduction en anglais d&apos; autocad . on notera par ailleurs que lisp vient en quatrième position en termes de lignes de codes utilisées pour implémenter les 8 600 paquets sources disponibles dans le système d&apos; exploitation debian publié en juin 2005 . les huit premiers langages se distribuent ainsi : c ( 57 % ) , c + + ( 16,8 % ) , shell ( 9 % ) , lisp ( 3 % ) , perl ( 2,8 % ) , python ( 1,8 % ) , java ( 1,6 % ) , fortran ( 1,2 % ) upgrade ( european journal for the informatics professional ) , juin 2005 , p. 14 . en juillet 2013 , lisp se place en 15e position de l&apos; index tiobe . les listes sont délimitées par des parenthèses et leurs éléments sont séparés par des espaces : ( 1 2 &quot; foo &quot; ) . un programme lisp est un arbre de syntaxe composé avec des listes . cette utilisation des parenthèses donne lieu à des moqueries utilisant l&apos; acronyme lisp : « lots of irritating and silly parentheses » ( « des tas de parenthèses irritantes et idiotes » ) , ou « lots of insipid and stupid parentheses » ( « des tas de parenthèses insipides et stupides » ) , ou « langage informatique stupidement parenthésé » . lisp est un langage orienté expression : il ne fait pas de distinction entre « expressions » et « instructions » comme le font de nombreux langages ( par exemple pascal ) ; tout est expression et retourne une valeur ou un ensemble de valeurs . la plupart des expressions lisp sont des applications de fonction . on utilise la même notation préfixée ( dite notation polonaiseformellement , il s&apos; agit de notation préfixée , mais l&apos; usage particulier des parenthèses dans le langage lisp induit qu&apos; il s&apos; agit réellement de notation polonaise , le rôle même de l&apos; interpréteur étant de réduire les expressions parenthésées en expressions linéaires interprétable de gauche à droite , les opérateurs en premier . ) pour les « formes spéciales » et les « macros » : le premier élément dans la liste , dans ces cas , détermine comment les éléments suivants seront traités . une expression peut être une application de fonction , une forme spéciale ou une application de macro suivant la nature du premier élément . le langage lisp dispose d&apos; une syntaxe très simple et élégante , utilisant un minimum de concepts . cette économie de concepts mène gregory chaitin à qualifier cette syntaxe de « joyau de splendeur mathématique et de beauté intellectuelle austère » gregory chaitin hasard et complexité en mathématiques flammarion 2009 . . a contrario , elle ne permet pas la détection d&apos; erreur. un atome est soit : un nombre , un nom , une chaîne de caractères , un opérateur . par opposition à la programmation numérique développée jusqu&apos; alors , lisp qui travaille sur des symboles plutôt que des nombres a permis une programmation plus qualitative , rendant possible l&apos; intelligence artificielle . d&apos; où , par exemple , des dialogues pseudo-naturels ( cf eliza , test de turing ) . de plus , ses fonctions et programmes ont la même forme que ses données ( propriété d&apos; homoiconicité ) . on peut même donner en lisp le principe d&apos; un interprète lisp . clos offre de l&apos; héritage multiple , la sélection multiple et un puissant système de combinaison de méthodes . common lisp ( dont clos fait partie ) fut le premier langage orienté-objet standardisé . aujourd&apos; hui , certains diraient que scheme est le dérivé de lisp atteignant la beauté décrite par chaitin ; et il est certain que common lisp , le descendant en ligne droite des grandes cuvées des dialectes passés de lisp ( maclisp , interlisp , zetalisp ) penche plus du côté de la boîte à outils géante , bien qu&apos; ayant conservé intact son cœur conceptuel . g. chaitin a utilisé ce lisp idéalisé pour ses recherches : elegant lisp programselegant lisp programs . the most powerful programming language is lisp . if you don&apos; t know lisp ( or its variant , scheme ) , you don&apos; t know what it means for a programming language to be powerful and elegant . once you learn lisp , you will see what is lacking in most other languages . unlike most languages today , which are focused on defining specialized data types , lisp provides a few data types which are general . instead of defining specific types , you build structures from these types . thus , rather than offering a way to define a list-of-this type and a list-of-that type , lisp has one type of lists which can hold any sort of data . islisp ( en ) catégorie : article contenant un appel à traduction en anglais , norme iso du langage islisp qui peut être considéré comme un sous-ensemble de common lisp , norme 13816 : 1997 ( e ) iso / iec 13816 : 1997 ( e ) , révisée en 2007 par iso / iec 13816 : 2007 ( e ) iso / iec 13816 : 2007 ( e ) . openlisp ( en ) catégorie : article contenant un appel à traduction en anglais , implémentation complète de la norme islisp ( en ) catégorie : article contenant un appel à traduction en anglais comportant de nombreuses extensions compatibles common lisp . lambda calcul : langage mathématique dont lisp , comme d&apos; autres langages informatiques fonctionnels , est inspiré . common lisp : descendant direct du lisp de mccarthy ; le terme lisp est aujourd&apos; hui autant employé pour se rapporter au lisp originel qu&apos; au common lisp . scheme : autre descendant du lisp , plus axé sur la programmation fonctionnelle que sur la programmation de macros . ( en ) history of lisp , tous les documents sur tous les dialectes de lisp ayant vu le jour depuis lisp 1.5 . ( fr ) lisp : présentation et ressources , y compris une introduction à la programmation en common lisp avec exemples .
