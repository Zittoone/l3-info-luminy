le développement de programme informatique capable de jouer au go est un problème de l&apos; intelligence artificielle . ce problème est considéré comme l&apos; un des plus complexes à résoudre , les algorithmes classiques ( minimax et alpha-bêta ) offrant des résultats médiocres . le premier programme a été écrit en 1968 par albert zobrist ( en ) catégorie : article contenant un appel à traduction en anglais comme un élément de sa thèse sur la reconnaissance des formes . dans les années 2010 , les programmes commencent à rivaliser avec les joueurs de go professionnels . le programme alphago bat un des meilleurs joueurs au monde en mars 2016 . comme pour tous les jeux , il faut jouer un coup qui améliore sa situation et détériore celle de son adversaire . pour estimer une situation aux échecs , une bonne estimation est de compter le nombre de pièces sur l&apos; échiquier , en les pondérant ( 1 point par pion , 5 par tour ... ) , et en ajustant la valeur trouvée par les libertés , les protections des pièces ... cela passe par le calcul d&apos; une fonction d&apos; évaluation , associant les scores de chacun des adversaires à chaque nœud . c&apos; est difficilement réalisable au go : on ne dispose pas de fonction d&apos; évaluation ( estimation des valeurs antagonistes d&apos; une position ) ne nécessitant pas - entre autres - des capacités « humaines » de « reconnaissance de formes » , l &apos; « expérience de parties » déjà jouées et une très grande « profondeur de calcul » . la technique d&apos; exploration des différentes possibilités ( pour chaque coup , déterminer la meilleure réponse possible , puis la meilleure réponse à celle-ci , et ainsi de suite … ) , plus techniquement la méthode dite minimax , échoue au go à cause de l&apos; énorme quantité de coups plausibles , de la durée des parties et de la complexité croissante ( aux échecs , la complexité est - elle - décroissante par diminution du nombre de pièces restantes ) . le nombre de positions légales est estimé à 10170 - sur un goban 19 × 19 ( contre environ 1040 aux échecs - sur un échiquier 8 × 8 ) template : lien web . , tandis que l&apos; arbre du jeu couvre 10600 parties plausibles ( contre environ 10120 aux échecs ) ce nombre , le nombre de shannon , est lui-même immensément supérieur à celui ( 1080 ) des particules de l&apos; univers ( voir template : lien web ) . . l&apos; augmentation de la puissance des ordinateurs n&apos; a que très peu d&apos; influence sur le niveau des programmes de go , et le problème du go est souvent considéré comme l&apos; un des grand défis de l&apos; intelligence artificielle . contrairement aux programmes de jeu d&apos; échecs qui ont rivalisé avec les meilleurs professionnels dès les années 1990 , les programmes de go n&apos; ont commencé à atteindre le niveau des joueurs de go professionnels qu&apos; en 2013victoire du programme crazy stone sur le template : 9e professionnel ishida yoshio le 20 mars 2013 ( cf. le site de crazy stone et l&apos; article de go game guru « crazy stone computer go program defeats ishida yoshio 9 dan with 4 stones » ) . . auparavant , sur les petits plateaux de taille 9 × 9 , les meilleurs programmes avaient atteint en 2005 le niveau des joueurs amateurs en dan , mais les techniques qui ont permis cette progression ne donnaient que des résultats mitigés sur la taille normale de plateau 19 × 19 , et le niveau en dan est resté hors d&apos; atteinte jusqu&apos; à l&apos; apparition des programmes basés sur l&apos; algorithme de monte-carlo en 2006 . avant cette date , un joueur moyen était capable de battre les meilleurs programmes et certains bons joueurs , entraînés spécifiquement , les avaient battu avec des handicaps allant jusqu&apos; à 30 pierres , ce qui serait impossible contre un joueur humain , même très peu expérimenté . ainsi en 1997 , janice kim , shodan professionnelle ( 1er dan pro . ) , battait le programme handtalk malgré un handicap de 25 pierres puis en 1998 , martin müller , 6e dan amateur , battait many faces of go malgré un handicap de 29 pierres . sur des goban de petite taille , les calculs sont plus simples à effectuer . en 2002 , le jeu sur un goban 5 × 5 a été résolu par le programme migos ( mini go solver ) de erik van der werf , fruit de l&apos; examen de 4 472 000 000 positions ( environ 4 heures sur un p4 2,0 ghz ) . sa thèsetemplate : en &#91; &#91; : template : lang &#93; &#93; , thèse développant la résolution du go sur 5x5. développe plus largement la résolution du go 5 × 5 . une des alternatives majeures à l&apos; utilisation de connaissances et de recherches est l&apos; utilisation des méthodes de monte-carlo . pour cela il suffit de lister les coups possibles et pour chaque coup de jouer des milliers de parties au hasardle jeu de go et la révolution de monte carlo sur le site interstices . . le coup qui conduit au meilleur résultat pour le joueur courant est supposé le meilleur coup . l&apos; avantage de cette méthode est qu&apos; elle requiert peu de connaissances spécifiques mais l&apos; inconvénient est qu&apos; elle est coûteuse en termes de mémoire et de temps processeur . de plus , parce que les coups utilisés pour l&apos; évaluation sont choisis au hasard , il est possible qu&apos; un coup qui serait excellent sauf pour une réponse spécifique soit de façon erronée choisi comme un bon coup . le résultat est un programme qui est fort d&apos; un point de vue stratégique mais faible tactiquement . ce problème peut être compensé en ajoutant de la connaissance à la génération de coup et une plus grande profondeur de recherche avant l&apos; évaluation de monte-carlo . parmi les programmes qui utilisent les techniques de monte-carlo se trouvent mogohttp : / / www.lri.fr / ~ gelly / mogo.htm , crazy stone , olga and gobble . en 2006 , une nouvelle technique , upper confidence bounds applied to trees ( ucthttp : / / senseis.xmp.net / ? uct ) , a été développée et utilisée par de nombreux programmes sur 9 × 9 avec d&apos; excellents résultats . uct utilise les résultats des play outs joués jusque là pour guider l&apos; exploration tout en autorisant des séquences alternatives à être explorées . uct et de nombreuses autres optimisations ont conduit mogo à être l&apos; un des plus forts programmes produits par un chercheur . parmi les premières applications avec succès de la méthode uct sur 19 × 19 on peut trouver mogo , crazystone , et mangohttp : / / www.cs.unimaas.nl / go4go / mango / . mogo a gagné l&apos; édition 2007 des computer olympiad et gagné un blitz sur trois contre guo juan , 5e dan professionnel , sur le goban 9 × 9 . the many faces of gohttp : / / www.smart-games.com a gagné l&apos; édition 2008 des computer olympiad après avoir ajouté uct à ses méthodes classiques de recherche . en 2008 , grâce à une parallélisation efficace , mogohttp : / / www.lri.fr / ~ teytaud / mogo.html a gagné une partiehttp : / / www.lri.fr / ~ teytaud / crmogo.en.html. ( sur trois ) contre catalin taranu , 5e dan professionnel , sur 9 × 9 avec des temps classiques ( 30 minutes pour chaque joueur ) . mogo tournait sur un cluster fourni par bull ( 32 nœuds avec 8 cœurs par nœud , chacun séquencé à 3 ghz ) . la machine n&apos; était pas disponible durant l&apos; un des matchs perdus . mogo a également joué une partie sur 19 × 19 contre catalin taranu et a perdu en dépit d&apos; un avantage de 9 pierres de handicap . cependant mogo était en bonne position durant cette partie et a perdu à cause d&apos; un mauvais choix lors d&apos; un ko . la machine utilisée pour cet évènement ( l&apos; iago challenge , organisé par la société « recitsproque » ) était une bonne machine mais loin des meilleurs standards de l&apos; industrie . le 7 août 2008 mogo a gagné une partie sur 19 × 19 face à kim myungwan 8e dan professionnel , avec mogo ayant un avantage de 9 pierres de handicap . mogo a gagné ( de 0,5 point , mais cette victoire n&apos; est pas si serrée qu&apos; il y parait , le programme jouant la sécurité et perdant des points dès qu&apos; il est certain de gagner ) . kim myungwan a utilisé environ 13 minutes de temps alors que mogo en a utilisé environ 55 , cependant il ne pense pas qu&apos; utiliser plus de temps lui aurait permis de gagner . mogo fonctionnait depuis les pays-bas sur un super ordinateur de 800 nœuds , chacun contenant 4 cœurs tournant à 4,7 ghz pour produire 15 téraflopssensei&apos; s library : mogo . . myungwan et mogo ont joué un total de 4 parties à handicap et limite de temps variable , chacun en gagnant deux . les enregistrements des parties sont accessibles sur le serveur de go kgs où mogo a joué sous le pseudonyme mogotitan . en 2009 , d&apos; autres victoires contre des professionnels à des handicaps plus faibles ( par des programmes tels que crazy stone ) ont eu lieu ; de plus , zen ( programme médaille d&apos; or aux olympiades de 2009 ) s&apos; est classé de manière consistante entre 1 et 2 dan sur kgs . zen , en particulier , a connu ensuite une progression plus lente , mais régulière , l&apos; amenant au début 2012 à un niveau de 4e dan sur kgs , et même de 6e dan en parties rapides ; lors d&apos; un match-exhibition contre takemiya masaki , il a gagné successivement une partie à 5 pierres de handicap , puis une partie à 4 pierrestemplate : en détails du match sur le site gogameguru . . articles détaillés : alphago et match alphago - lee sedol . en octobre 2015 , le programme alphago développé par google deepmind , combinant plusieurs techniques comme du deep learning , a franchi une nouvelle étape que les experts pensaient ne pas pouvoir être atteinte avant de nombreuses annéestemplate : en a. levinovitz , the mystery of go , the ancient game that computers still can ’ t win . wired magazine ( 2014 ) . : il bat sans handicap fan hui , le meilleur joueur européen , professionnel 2e dan , par le score de cinq victoires à zéro en parties lentes et trois à deux en parties rapides , interview de fan hui à ce sujet . . en mars 2016 , il bat lee sedol , joueur 9e dan , alors considéré comme un des meilleurs joueurs mondiaux , en remportant successivement les trois premières parties , puis la cinquième d&apos; un match en cinq partiestemplate : article . ce match est suivi en direct sur internet , et qualifié de moment historique . les performances d ’ alphago amènent de nombreux programmeurs à tenter de développer des systèmes analogues ( mais encore un peu plus faibles au debut de 2017 ) ; ainsi , en novembre 2016 , une version améliorée de zen , deep zen , réussit à gagner une partie sur trois d ’ un match à égalité contre cho chikunla revanche de l ’ humain , sur science et avenir , 11 novembre 2016 . . ( en ) cet article est partiellement ou en totalité issu de l ’ article de wikipédia en anglais intitulé « go software » ( voir la liste des auteurs ) . go text protocol : interface de jeu utilisée par les programmes .
