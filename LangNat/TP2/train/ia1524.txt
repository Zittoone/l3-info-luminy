la recherche dichotomique , ou recherche par dichotomietemplate : lien web . , est un algorithme de recherche pour trouver la position d&apos; un élément dans un tableau trié . le principe est le suivant : comparer l&apos; élément avec la valeur de la case au milieu du tableau ; si les valeurs sont égales , la tâche est accomplie , sinon on recommence dans la moitié du tableau pertinente . le nombre d&apos; itération de la procédure , c&apos; est-à-dire le nombre de comparaisons , est logarithmique en la taille du tableau . on peut illustrer d&apos; interêt de la recherche dichotomique par l&apos; exemple du jeu suivant . a et b jouent au jeu suivant : a choisit un nombre entre 0 et 100 , et ne le communique pas à b , b doit trouver ce nombre en posant des questions à a dont les réponses ne peuvent être que oui ou non . b doit essayer de poser le moins de question possible . b sait que le nombre est entre 0 et 100 ; au milieu se trouve 50 , b demande donc : « est-ce que le nombre est plus grand que 50 ? » . a répond « oui » . et ainsi de suite : « plus grand que 63 ? ( 63 = ( 51 + 75 ) ÷ 2 ) » , « oui » , « plus grand que 69 ? ( 69 = ( 63 + 75 ) ÷ 2 ) » , « non » , « plus grand que 66 ? ( 66 = ( 69 + 63 ) ÷ 2 ) » , « non » , « plus grand que 65 ? ( 65 ≈ ( 63 + 66 ) ÷ 2 ) » , « oui » . b sait maintenant que le nombre est entre 66 et 66 , autrement dit qu&apos; il s&apos; agit de 66 : il a trouvé le nombre choisi par a en seulement 7 questions . trouver la position la plus centrale du tableau ( si le tableau est vide sortir ) . comparer la valeur de cette case à l&apos; élément recherché . si la valeur est égale à l&apos; élément , alors retourner la position , sinon reprendre la procédure dans la moitié de tableau pertinente . on peut toujours se ramener à une moitié de tableau , par exemple sur un tableau trié en ordre croissant , si la valeur de la case est plus petite que l&apos; élément , on continuera sur la moitié droite , c&apos; est-à-dire sur la partie du tableau qui contient des nombres plus grand que la valeur de la case , sinon on continuera sur la moitié gauche . / / une boucle infinie si &apos; val &apos; n&apos; existe pas dans le tableau . on peut modifier l&apos; algorithme pour faire des requêtes approchées , par exemple , quel est la plus petite valeur strictement plus grande que a dans le tableau . la dichotomie possède une complexité algorithmique logarithmique en le nombre d&apos; éléments composants le tableau dans lequel s&apos; effectue la recherchetemplate : lien web . , template : lien web . on considère dans un premier temps le nombre de comparaisons comme étant la mesure de complexité . on appelle t ( n ) le nombre de comparaisons effectuées pour une instance de taille n. alors le t satisfait la récurrence suivante : t ( n ) = 1 + t ( n / 2 ) . cette récurrence a une solution de la forme t ( n ) = o ( log ( n ) ) , avec la notation de landau . enfin le nombre de comparaison est linéaire en le nombre d&apos; opérations effectuées , l&apos; algorithme a donc une complexité logarithmique . la méthode de recherche la plus simple est la recherche séquentielle qui s&apos; effectue en temps linéaire : étudier les éléments les uns après les autres . elle ne nécessite pas d&apos; avoir une structure de données triée . de plus elle peut être pratiquée non seulement sur un tableau , mais aussi sur une liste chaînée , qui est parfois une structure plus adaptée . sur des tableaux ordonnés , la recherche dichotomique est plus rapide asymptotiquement , mais pas forcement sur des tableaux de petite tailletemplate : knuth-taocpvol3 § 6.2.1 ( &quot; searching an ordered table &quot; ) , subsection &quot; further analysis of binary search &quot; . . le hachage est souvent plus rapide que la recherche dichotomique , avec une complexité amortie constante . la recherche dichotomique est cependant plus robuste en ce qu&apos; elle peut être utilisée pour d&apos; autre tâche qu&apos; une simple recherche , comme par exemple trouver les éléments les plus proches d&apos; un certain élément . les arbres binaires de recherche utilisent une stratégie de dichotomie similaire à celle de la recherche dichotomique . la structure est plus efficace que les tableaux triés en ce qui concerne le temps d&apos; insertion et de suppression ( logarithmique et non binaire ) , mais ils prennent plus d&apos; espace . de plus si un tel arbre n&apos; est pas parfaitement équilibré alors la recherche dichotomique sur tableau sera plus rapide . d&apos; autres structures de recherches sont : les tableau de judy ( en ) catégorie : article contenant un appel à traduction en anglaistemplate : lien web , les filtres de bloom , les arbre de van emde boas ( en ) catégorie : article contenant un appel à traduction en anglais , arbre fusion ( en ) catégorie : article contenant un appel à traduction en anglais , les tries et les tableaux de bits . en dehors des considérations mathématiques , la méthode de détection de problème par dichotomie peut être appliquée à de nombreux processus . par exemple , en industrie , si un produit passant par x phases de transformation présente une anomalie , il est très pratique d&apos; utiliser la dichotomie pour analyser les transformations ( ou processus ) par groupe plutôt qu&apos; un par un . cela permet aussi d&apos; effectuer des réglages précis par étape . la méthode de dichotomie peut , par exemple , être utilisée si l&apos; on rencontre un problème lorsque l&apos; on groupe plusieurs appareils : on peut essayer de trouver le bon appareil en les triant et en faisant un dichotomie ( en faisant des plus petit groupes ) . la recherche par dichotomie peut être appliquée à la recherche des zéros approchés d&apos; une fonction continue : il s&apos; agit de la méthode de dichotomie .
