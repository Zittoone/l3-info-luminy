1. Prétraitements
1.1
(1) ted.txt contient 185 552 lignes, 3 343 242 mots et 20 217 667 caractères.
(2) Il y a 45 lignes qui contiennent le mot oiseau.
(3) On obtient un total de 41 110 lignes lorsque la commande :
    grep -o -c -E "[^ ]*ment[^a-Z]" ted.txt
    Ce résultat est donc le nombre de ligne qui contiennent un mot finissant par -ment.
    
    On obtient un total de 1 291 mots différents grâce à la commande suivante :
    grep -o "[a-Z]*ment[^a-Z]" ted.txt 
	| sed "s/[^a-Z]//g"
	| tr '[:upper:]' '[:lower:]' 
	| uniq 
	| wc
    Ce résultat va donc prendre tous les mots qui finissents par -ment,
    ensuite on enlève tous les autres symboles qui terminent notre regex du grep (les non alpha) 
    puis on supprime l'ambiguité entre majuscules et minuscules, 
    et enfin on compte le nombre de mot au total sur un résultat de mot distinct (uniq).
    Attention, certains mots n'ont pas été correctement changés en minuscule (tel que les majuscules accentuées) donc le compte n'est peut être pas exact.
(4) sed -E "s/ /\-/g" ted.txt

1.2
(1) On obtient un total de 210 062 lignes (donc de phrases) avec la commande :
    sed -E "s/(\..)/\1\n/g" ted.txt
    Cela permet de chercher tous les points qui ont un caractère quelconque ensuite et ajoute un retour à la ligne après.
    En revanche, les "...", les URLs, les noms, etc. auront un problème avec cette expression régulière.
    C'est donc le deuxième point de la question :
    sed -E "s/([a-z]*\..)/\1\n/" ted.txt pas très fonctionnel
(2) On obtient un total de 206 291 lignes (donc de phrases), il y a peu de différences mais on a un texte qui est mieux néttoyé.
    Sur un corpus encore plus long ça aurait pu avoir de plus lourde conséquences.

(3) Il y a un total de 3 343 242 mots avant l'utilisation de la commande : 
    sed -r 's/([^ ]), /\1 , /g' | wc
    Après celle-ci on obtient un total de 3 556 636 mots.
    Nous allons maintenant séparés tous les caractères qui ne sont pas des alphas des mots via la commande suivante :
     

